#ifndef GEO_COMMON_BT
#define GEO_COMMON_BT

#include "../common/common.bt"

#define COLOR_BG_TAGS 0xFF00FF
#define COLOR_FG_TAGS 0x00FF00

typedef struct
{
	BitfieldDisablePadding();
	uint64 TRAP_TAGS_Intrude : 1; // 0x1
	uint64 TRAP_TAGS_Tower : 1; // 0x2
	uint64 TRAP_TAGS_InRoom : 1; // 0x4
	uint64 TRAP_TAGS_FallDeath : 1; // 0x8

	uint64 TRAP_TAGS_NearCamera1 : 1; // 0x10
	uint64 TRAP_TAGS_NearCamera2 : 1; // 0x20
	uint64 TRAP_TAGS_NearCamera3 : 1; // 0x40
	uint64 TRAP_TAGS_NearCamera4 : 1; // 0x80

	uint64 TRAP_TAGS_NoCliff : 1; // 0x100
	uint64 TRAP_TAGS_NoRainEffect : 1; // 0x200
	uint64 TRAP_TAGS_x60e79a58dcc3 : 1; // 0x400
	uint64 TRAP_TAGS_GimmickNoFulton : 1; // 0x800

	uint64 TRAP_TAGS_innerZone : 1; // 0x1000
	uint64 TRAP_TAGS_outerZone : 1; // 0x2000
	uint64 TRAP_TAGS_hotZone : 1; // 0x4000
	uint64 TRAP_TAGS_x439898dcbf83 : 1; // 0x8000

	uint64 TRAP_TAGS_xe780e431a068 : 1; // 0x10000
	uint64 TRAP_TAGS_x53827eed3fbc : 1; // 0x20000
	uint64 TRAP_TAGS_x7e1121c5cb93 : 1; // 0x40000
	uint64 TRAP_TAGS_xcadd57b76a83 : 1; // 0x80000

	uint64 TRAP_TAGS_xe689072c4df8 : 1; // 0x100000
	uint64 TRAP_TAGS_x6d14396ebbe5 : 1; // 0x200000 - from 2020 caplag: "mgo/cuba underground, and also watchtower south of helipad" + "Doors? Something with doors? 2 x 2 x 25"
	uint64 TRAP_TAGS_NoStepOn : 1; // 0x400000
	uint64 TRAP_TAGS_HalationEffect : 1; // 0x800000

	uint64 TRAP_TAGS_Unnamed1 : 1; // 0x1000000
	uint64 TRAP_TAGS_Unnamed2 : 1; // 0x2000000
	uint64 TRAP_TAGS_Unused2 : 1 <hidden = true>; Assert(TRAP_TAGS_Unused2 == 0); // 0x4000000
	uint64 TRAP_TAGS_Unused3 : 1 <hidden = true>; Assert(TRAP_TAGS_Unused3 == 0); // 0x8000000

	uint64 TRAP_TAGS_xd6ee65d20b7a : 1; // 0x10000000
	uint64 TRAP_TAGS_xf287ba9cb7e3 : 1; // 0x20000000
	uint64 TRAP_TAGS_NoFulton : 1; // 0x40000000
	uint64 TRAP_TAGS_Waterfall: 1; // 0x80000000 for convenience in 010 but the tag is actually 0xffffffff80000000, signalling that there are no higher-value tags
	BitfieldEnablePadding();
} TRAP_TAGS <bgcolor = COLOR_BG_TAGS, fgcolor = COLOR_FG_TAGS>;

typedef struct
{
	// https://github.com/TinManTex/mgsv-deminified-lua/blob/3b8d6a0487ce45f69502d40e684b3d653d3b8965/data1/Tpp/start.lua#L292
	uint64 PATH_TAGS_Elude : 1;
	uint64 PATH_TAGS_Jump : 1;
	uint64 PATH_TAGS_Fence : 1;
	uint64 PATH_TAGS_StepOn : 1;
	uint64 PATH_TAGS_Behind : 1;
	uint64 PATH_TAGS_Urgent : 1;
	uint64 PATH_TAGS_Pipe : 1;
	uint64 PATH_TAGS_Climb : 1;
	uint64 PATH_TAGS_Rail : 1;
	uint64 PATH_TAGS_ForceFallDown : 1;
	uint64 PATH_TAGS_DontFallWall : 1;
	uint64 PATH_TAGS_Move : 1;
} PATH_TAGS <bgcolor = COLOR_BG_TAGS, fgcolor = COLOR_FG_TAGS>;

typedef struct
{
	// https://github.com/TinManTex/mgsv-deminified-lua/blob/3b8d6a0487ce45f69502d40e684b3d653d3b8965/data1/Tpp/start.lua#L292
	uint EDGE_TAGS_Stand : 1;
	uint EDGE_TAGS_Squat : 1;
	uint EDGE_TAGS_BEHIND_LOW : 1;
	uint EDGE_TAGS_FenceElude : 1;
	uint EDGE_TAGS_Elude : 1;
	uint EDGE_TAGS_Jump : 1;
	uint EDGE_TAGS_Fence : 1;
	uint EDGE_TAGS_StepOn : 1;
	uint EDGE_TAGS_Behind : 1;
	uint EDGE_TAGS_Urgent : 1;
	uint EDGE_TAGS_NoEnd : 1;
	uint EDGE_TAGS_NoStart : 1;
	uint EDGE_TAGS_FenceJump : 1;
	uint EDGE_TAGS_Wall : 1;
	uint EDGE_TAGS_NoWall : 1;
	uint EDGE_TAGS_ToIdle : 1;
	uint EDGE_TAGS_EnableFall : 1;
	uint EDGE_TAGS_NoFreeFall : 1;
	uint EDGE_TAGS_Fulton : 1;
	uint EDGE_TAGS_BEHIND_SNAP : 1;
	uint EDGE_TAGS_LineCheck : 1;
	uint EDGE_TAGS_FallNear : 1;
	uint EDGE_TAGS_FenceToStepOn : 1;
	uint EDGE_TAGS_ForceFallCatch : 1;
	uint EDGE_TAGS_Window : 1;
	uint EDGE_TAGS_AimIsBack : 1;
} EDGE_TAGS <bgcolor = COLOR_BG_TAGS, fgcolor = COLOR_FG_TAGS>;

typedef struct
{
	// https://github.com/TinManTex/mgsv-deminified-lua/blob/3b8d6a0487ce45f69502d40e684b3d653d3b8965/data1/Tpp/start.lua#L292
	uint NODE_TAGS_Edge : 1;
	uint NODE_TAGS_Cover : 1;
	uint NODE_TAGS_BEHIND_LOOK_IN : 1;
	uint NODE_TAGS_CHANGE_TO_60 : 1;
	uint NODE_TAGS_NoTurn : 1;
	uint NODE_TAGS_BEHIND_STOP : 1;
	uint NODE_TAGS_NoOut : 1;
	uint NODE_TAGS_NoStart : 1;
	uint NODE_TAGS_EludeToElude : 1;
} NODE_TAGS <bgcolor = COLOR_BG_TAGS, fgcolor = COLOR_FG_TAGS>;

typedef struct
{
	BitfieldDisablePadding();
	uint64 COLLISION_TAGS_UNKNOWN1 : 1; if (COLLISION_TAGS_UNKNOWN1) Printf("COLLISION_TAGS_UNKNOWN1 set.\n");
	uint64 COLLISION_TAGS_RECOIL_FLOOR_MAYBE : 1;
	uint64 COLLISION_TAGS_UNKNOWN0 : 1; if (COLLISION_TAGS_UNKNOWN0) Printf("COLLISION_TAGS_UNKNOWN0 set.\n");
	uint64 COLLISION_TAGS_CHARA_MAYBE : 1;

	uint64 COLLISION_TAGS_PLAYER : 1;
	uint64 COLLISION_TAGS_ENEMY : 1;
	uint64 COLLISION_TAGS_BULLET : 1;
	uint64 COLLISION_TAGS_MISSILE : 1;

	uint64 COLLISION_TAGS_BOMB : 1;
	uint64 COLLISION_TAGS_UNUSED5 : 1;
	uint64 COLLISION_TAGS_BLOOD : 1;
	uint64 COLLISION_TAGS_IK : 1;

	uint64 COLLISION_TAGS_STAIRWAY : 1;
	uint64 COLLISION_TAGS_STOP_EYE : 1;
	uint64 COLLISION_TAGS_CLIFF : 1;
	uint64 COLLISION_TAGS_UNUSED4 : 1; Assert(COLLISION_TAGS_UNUSED4 == 0);

	uint64 COLLISION_TAGS_UNUSED6 : 1; Assert(COLLISION_TAGS_UNUSED6 == 0);
	uint64 COLLISION_TAGS_DONT_FALL : 1;
	uint64 COLLISION_TAGS_CAMERA : 1;
	uint64 COLLISION_TAGS_UNUSED2 : 1; Assert(COLLISION_TAGS_UNUSED2 == 0);

	uint64 COLLISION_TAGS_UNUSED1 : 1; Assert(COLLISION_TAGS_UNUSED1 == 0);
	uint64 COLLISION_TAGS_UNUSED0 : 1; Assert(COLLISION_TAGS_UNUSED0 == 0);
	uint64 COLLISION_TAGS_CLIFF_FLOOR : 1;
	uint64 COLLISION_TAGS_BULLET_MARK : 1;

	uint64 COLLISION_TAGS_HEIGHT_LIMIT : 1;
	uint64 COLLISION_TAGS_DOUBLE_SLIDE : 1;
	uint64 COLLISION_TAGS_WATER_SURFACE : 1;
	uint64 COLLISION_TAGS_TARGET_BLOCK : 1;

	uint64 COLLISION_TAGS_DOG : 1;
	uint64 COLLISION_TAGS_NO_EFFECT : 1;
	uint64 COLLISION_TAGS_EVENT_PHYSICS : 1;
	uint64 COLLISION_TAGS_NO_WALL_MOVE : 1;

	ushort Padding0 : 16 <hidden=true>; //Assert(Padding0 == 0); //ssdm_brdg001_brdg001.geom

	uint64 COLLISION_TAGS_MISSILE2 : 1;
	uint64 COLLISION_TAGS_RIDE_ON_OUTER : 1;
	uint64 COLLISION_TAGS_FLAME : 1;
	uint64 COLLISION_TAGS_IGNORE_PHYSICS : 1;`

	uint64 COLLISION_TAGS_CLIMB : 1;
	uint64 COLLISION_TAGS_HORSE : 1;
	uint64 COLLISION_TAGS_VEHICLE : 1;
	uint64 COLLISION_TAGS_MARKER : 1;

	uint64 COLLISION_TAGS_RIDE_ON : 1;
	uint64 COLLISION_TAGS_THROUGH_LINE_OF_FIRE : 1;
	uint64 COLLISION_TAGS_THROUGH_ITEM_CHECK : 1;
	uint64 COLLISION_TAGS_NO_CREEP : 1;

	uint64 COLLISION_TAGS_NO_FULTON : 1;
	uint64 COLLISION_TAGS_FULTON : 1;
	uint64 COLLISION_TAGS_ITEM : 1;
	uint64 COLLISION_TAGS_BOSS : 1;
	BitfieldEnablePadding();
} COLLISION_TAGS <bgcolor = COLOR_BG_TAGS, fgcolor = COLOR_FG_TAGS>;

enum <byte> GEO_FILE_TYPE
{
	GEO_FILE_TYPE_GPFP = 0,
	GEO_FILE_TYPE_GEOM_GEOMS_GSKL = 1,
	GEO_FILE_TYPE_TRAP = 2,
};

enum <uint> GEO_COLLISION_SHAPE_TYPE
{
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN0 = 0,   	// Entry size: 0x30
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN1 = 1,		// Entry size: 0x30
	GEO_COLLISION_SHAPE_TYPE_QUAD = 2,		// Entry size: 0xA
	GEO_COLLISION_SHAPE_TYPE_BOX = 3,		// Entry size: 0x60
	GEO_COLLISION_SHAPE_TYPE_AABB = 4,	        // Entry size: 0x20
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN5 = 5,		// Entry size: 0x80
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN6 = 6,		// Entry size: 0
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN7 = 7,		// Entry size: 0
	GEO_COLLISION_SHAPE_TYPE_PATH = 8,		// Entry size: 0x8
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN9 = 6,		// Entry size: 0
	GEO_COLLISION_SHAPE_TYPE_UNKNOWN10 = 7,		// Entry size: 0
	GEO_COLLISION_SHAPE_TYPE_PATH_WALL = 11,	// Entry size: 0x10
};

typedef enum <uint>
{
	GEO_COLLISION_SHAPE_FLAGS_UNKNOWN6 = 0x1, 						                   // Found in TRAP.
	GEO_COLLISION_SHAPE_FLAGS_UNKNOWN4 = 0x4, 						                   // Found in GPFP.
	GEO_COLLISION_SHAPE_FLAGS_NO_PAYLOAD = 0x20, 						               // mgsvtpp.exe!141bdc498 // info & 0x200
	GEO_COLLISION_SHAPE_FLAGS_UNKNOWN1 = 0x200,              						   // mgsvtpp.exe!141bdc863, 141bd8041 // info >> 0xd, info & 0x2000
	GEO_COLLISION_SHAPE_FLAGS_USE_FMDL_VERTEX_DATA = 0x800,                           // mgsvtpp.exe!141bd7e30 // info & 0x8000
	GEO_COLLISION_SHAPE_FLAGS_UNKNOWN3 = 0x2000,             						   // mgsvtpp.exe!141bdc7a7 // info >> 0x11
	GEO_COLLISION_SHAPE_FLAGS_UNKNOWN2 = 0x8000,             						   // mgsvtpp.exe!141bdc830 // info >> 0x13
	GEO_COLLISION_SHAPE_FLAGS_UNKNOWN5 = 0x80000,             						   // Found in GPFP and TRAP.
} GEO_COLLISION_SHAPE_FLAGS <read = ReadGEO_COLLISION_SHAPE_FLAGS>;
string ReadGEO_COLLISION_SHAPE_FLAGS(GEO_COLLISION_SHAPE_FLAGS flags)
{
	local string result;
	local uint i;
	local uint j;
	local byte hasRemaining = 0;
	local string enumName;
	local GEO_COLLISION_SHAPE_FLAGS temp;
	for (i = 1; i < 0x100000; i = i << 1)
	{
		temp = flags & i;
		enumName = EnumToString(temp);
		if (enumName != "")
		{
			for (j = i << 4; j < 0x100000; j = j << 1)
			{
				if ((flags & j) != 0)
				{
					hasRemaining = 1;
					break;
				}
			}

			if (hasRemaining)
			{
				result += Str("%s | ", enumName);
				hasRemaining = 0;
			}
			else
			{
				result += enumName;
				break;
			}
		}
	}

	return result;
}

struct GeoCollisionShapeHeader (GEO_FILE_TYPE fileType)
{
	BitfieldDisablePadding();
	GEO_COLLISION_SHAPE_TYPE Type : 4 <bgcolor=0x0080ff>;

 	GEO_COLLISION_SHAPE_FLAGS Flags : 20 <bgcolor=0x0080ff>;  // mgsvtpp.exe!141bdc492

	uint EntryCount : 8 <bgcolor=0x0080ff>;
	BitfieldEnablePadding();

	// See geom_geoms_gskl.bt for more information.
	uint NextBBDataChunkOffset; // In geom, this is multipled by 16; it's a lines offset.

	uint Unknown0;
	uint NextIndexDataChunkOffset; // In geom, this is multipled by 16; it's a lines offset.

	switch (fileType)
	{
	case GEO_FILE_TYPE_GPFP:
		PATH_TAGS Tags;
		break;

	case GEO_FILE_TYPE_GEOM_GEOMS_GSKL:
		COLLISION_TAGS Tags;
		break;

	case GEO_FILE_TYPE_TRAP:
		TRAP_TAGS Tags;
		break;
	}

	StrCode32 Name; // With gimmicks, it has to be the gimmick instance name as StrCode32 hash, ie <_n0000|srt_>. 
					// If there's more than one path for one instance, the hash is the same, but with the seventh of the eight bits shifted by 2

	uint VertexDataOffset; // In geom, this is multipled by 16; it's a lines offset.
};

#endif
